// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Avatar Render adjusts component size to 24 when window size is xs 1`] = `
<div>
  <span
    class="dcloud-avatar dcloud-avatar-circle"
    style="width: 24px; height: 24px; line-height: 24px; font-size: 18px;"
  >
    <span
      class="dcloud-avatar-string"
      style="transform: scale(0.8) translateX(-50%);"
    />
  </span>
</div>
`;

exports[`Avatar Render adjusts component size to 32 when window size is sm 1`] = `
<div>
  <span
    class="dcloud-avatar dcloud-avatar-circle"
    style="width: 32px; height: 32px; line-height: 32px; font-size: 18px;"
  >
    <span
      class="dcloud-avatar-string"
      style="transform: scale(0.8) translateX(-50%);"
    />
  </span>
</div>
`;

exports[`Avatar Render adjusts component size to 40 when window size is md 1`] = `
<div>
  <span
    class="dcloud-avatar dcloud-avatar-circle"
    style="width: 40px; height: 40px; line-height: 40px; font-size: 18px;"
  >
    <span
      class="dcloud-avatar-string"
      style="transform: scale(0.8) translateX(-50%);"
    />
  </span>
</div>
`;

exports[`Avatar Render adjusts component size to 64 when window size is lg 1`] = `
<div>
  <span
    class="dcloud-avatar dcloud-avatar-circle"
    style="width: 64px; height: 64px; line-height: 64px; font-size: 18px;"
  >
    <span
      class="dcloud-avatar-string"
      style="transform: scale(0.8) translateX(-50%);"
    />
  </span>
</div>
`;

exports[`Avatar Render adjusts component size to 80 when window size is xl 1`] = `
<div>
  <span
    class="dcloud-avatar dcloud-avatar-circle"
    style="width: 80px; height: 80px; line-height: 80px; font-size: 18px;"
  >
    <span
      class="dcloud-avatar-string"
      style="transform: scale(0.8) translateX(-50%);"
    />
  </span>
</div>
`;

exports[`Avatar Render adjusts component size to 100 when window size is xxl 1`] = `
<div>
  <span
    class="dcloud-avatar dcloud-avatar-circle"
    style="width: 100px; height: 100px; line-height: 100px; font-size: 18px;"
  >
    <span
      class="dcloud-avatar-string"
      style="transform: scale(0.8) translateX(-50%);"
    />
  </span>
</div>
`;

exports[`Avatar Render fallback 1`] = `
LoadedCheerio {
  "0": <span
    class="dcloud-avatar dcloud-avatar-circle"
  >
    <span
      class="dcloud-avatar-string"
      style="transform: scale(1) translateX(-50%);"
    >
      A
    </span>
  </span>,
  "_root": LoadedCheerio {
    "0": Document {
      "children": Array [
        <html>
          <head />
          <body />
        </html>,
      ],
      "endIndex": null,
      "next": null,
      "parent": null,
      "prev": null,
      "startIndex": null,
      "type": "root",
      "x-mode": "quirks",
    },
    "_root": [Circular],
    "length": 1,
    "options": Object {
      "decodeEntities": true,
      "xml": false,
    },
  },
  "length": 1,
  "options": Object {
    "decodeEntities": true,
    "xml": false,
  },
}
`;

exports[`Avatar Render rtl render component should be rendered correctly in RTL direction 1`] = `
LoadedCheerio {
  "0": <span
    class="dcloud-avatar dcloud-avatar-circle"
  >
    <span
      class="dcloud-avatar-string"
      style="transform: scale(0.9) translateX(-50%);"
    />
  </span>,
  "_root": LoadedCheerio {
    "0": Document {
      "children": Array [
        <html>
          <head />
          <body />
        </html>,
      ],
      "endIndex": null,
      "next": null,
      "parent": null,
      "prev": null,
      "startIndex": null,
      "type": "root",
      "x-mode": "quirks",
    },
    "_root": [Circular],
    "length": 1,
    "options": Object {
      "decodeEntities": true,
      "xml": false,
    },
  },
  "length": 1,
  "options": Object {
    "decodeEntities": true,
    "xml": false,
  },
}
`;

exports[`Avatar Render should calculate scale of avatar children correctly 1`] = `ReactWrapper {}`;

exports[`Avatar Render should calculate scale of avatar children correctly 2`] = `ReactWrapper {}`;

exports[`Avatar Render should calculate scale of avatar children correctly with gap 1`] = `ReactWrapper {}`;

exports[`Avatar Render should handle onError correctly 1`] = `ReactWrapper {}`;

exports[`Avatar Render should show image on success after a failure state 1`] = `ReactWrapper {}`;

exports[`Avatar Render should show image on success after a failure state 2`] = `ReactWrapper {}`;

exports[`Avatar Render support size is number 1`] = `
LoadedCheerio {
  "0": <span
    class="dcloud-avatar dcloud-avatar-circle"
    style="width: 100px; height: 100px; line-height: 100px; font-size: 18px;"
  >
    <span
      class="dcloud-avatar-string"
      style="line-height: 100px; transform: scale(0.8) translateX(-50%);"
    >
      TestString
    </span>
  </span>,
  "_root": LoadedCheerio {
    "0": Document {
      "children": Array [
        <html>
          <head />
          <body />
        </html>,
      ],
      "endIndex": null,
      "next": null,
      "parent": null,
      "prev": null,
      "startIndex": null,
      "type": "root",
      "x-mode": "quirks",
    },
    "_root": [Circular],
    "length": 1,
    "options": Object {
      "decodeEntities": true,
      "xml": false,
    },
  },
  "length": 1,
  "options": Object {
    "decodeEntities": true,
    "xml": false,
  },
}
`;
